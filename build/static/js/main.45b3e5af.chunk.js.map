{"version":3,"sources":["components/QueryForm.js","components/ListTweets.js","components/Loading.js","components/QueryTypeSelector.js","components/QueryOrderSelector.js","components/PageSelector.js","components/InfoPanel.js","components/App.js","index.js"],"names":["QueryForm","props","className","value","query","onChange","handleQueryChange","onKeyPress","event","key","console","log","queryTweets","onClick","type","ListTweets","tweets","length","maxTweetIndex","page","slice","map","tweet","tweetId","id_str","id","Loading","loading","src","alt","width","height","QueryTypeSelector","QueryType","handleQueryTypeChange","QueryOrderSelector","queryOrder","handleQueryOrderChange","PageSelector","tweetsLength","handlePageDown","class","handlePageUp","href","target","rel","maxPage","App","useState","setQuery","user","setUser","setTweets","setLoading","queryType","setQueryType","setQueryOrder","setPage","preventDefault","queryObject","axios","post","then","response","data","screen_name","catch","error","InfoPanel","Math","ceil","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.45b3e5af.chunk.js","sourcesContent":["import React from 'react'\n\nconst QueryForm = (props) => (\n    <div className=\"interactables\">\n        @<input className=\"queryBar\" value={props.query} onChange={props.handleQueryChange} \n        onKeyPress={event => {\n            if (event.key === 'Enter') {\n                console.log(\"Enter!\")\n                props.queryTweets()\n            }\n        }}/>\n        <div className=\"interactables\"><button onClick={props.queryTweets} type=\"submit\">Get Tweets</button></div>\n    </div>\n)\n\nexport default QueryForm","import React from 'react'\nimport { Tweet } from 'react-twitter-widgets'\n\nconst ListTweets = (props) => {\n\n    const tweets = props.tweets\n    if(tweets.length === 0) return null\n\n    // If page 1 => tweets 0 to 10\n    // If page 10 => tweets 100 to 110\n\n    const maxTweetIndex = props.page * 10\n\n    const renderedTweets = tweets.slice(maxTweetIndex - 10, maxTweetIndex)\n\n    const content = renderedTweets.map(tweet => \n        <div key={tweet.id}>\n            <Tweet tweetId={tweet.id_str}/>\n            <br></br>\n        </div>\n        )\n    return content\n}\n\nexport default ListTweets","import React from 'react'\n\nconst Loading = (props) => {\n\n    if (props.loading === true) {\n        return (\n            <div id=\"loading\"> \n                <img src=\"loading.gif\" alt=\"loading symbol\" width=\"100\" height=\"25\"/> \n            </div>\n        )\n    } else {\n        return null\n    }\n}\n\nexport default Loading","import React from 'react'\n\nconst QueryTypeSelector = (props) => (\n    <form className=\"interactables\">\n        <label>\n            Sort by \n            <select value={props.QueryType} onChange={props.handleQueryTypeChange}>\n                <option value=\"favorites\">Likes</option>\n                <option value=\"retweets\">Reach</option>\n                <option value=\"date\">Date</option>\n            </select>\n        </label>\n    </form>\n)\n\nexport default QueryTypeSelector","import React from 'react'\n\nconst QueryOrderSelector = (props) => (\n    <form className=\"interactables\">\n        <label>\n            In \n            <select value={props.queryOrder} onChange={props.handleQueryOrderChange}>\n                <option value=\"asc\">Ascending</option>\n                <option value=\"desc\">Descending</option>\n            </select>\n             order\n        </label>\n    </form>\n)\n\nexport default QueryOrderSelector","import React from 'react'\n\nconst PageSelector = (props) => {\n    if (props.tweetsLength === 0) {\n        return null\n    }\n\n    return (\n    <div className=\"pagers\">\n        <button onClick={props.handlePageDown} type=\"submit\" class=\"interactables\">Previous Page</button>\n        {props.page}\n        <button onClick={props.handlePageUp} type=\"submit\" class=\"interactables\">Next Page</button>\n    </div>\n    )\n}\n\nexport default PageSelector","import React from 'react'\n\nconst ListTweets = (props) => {\n\n    // Error message can show here\n    if(props.tweetsLength === 0)\n    {\n        return (\n        <div>\n            <h3>Welcome to this sorting tool!</h3>\n            <p>Type in a twitter username (the one with the '@' before it) to get up to ~3,200 of an account's most recent tweets. You can sort their tweets by Date, Likes, or Retweets, and choose either ascending or descending order.</p>\n            <p>A loading symbol will show while the tweets are being fetched. If this area is empty (not even this welcome message) it means the tweets are being rendered :)</p>\n            <p>If you enjoy this little tool, follow me <a href=\"https://twitter.com/averywlittle\" target=\"_blank\" rel=\"noreferrer\">@averywlittle</a>.</p>\n            <p>The code is available <a href=\"https://github.com/averywlittle/tweetsort\" target=\"_blank\" rel=\"noreferrer\">here</a>.</p>\n        </div>\n        )\n    } else {\n        return (\n            <div>\n                <p>{props.tweetsLength} tweets loaded! Showing page {props.page} of {props.maxPage}.</p>\n            </div>\n        )\n    }\n}\n\nexport default ListTweets","import React, { useState } from 'react'\nimport QueryForm from './QueryForm'\nimport ListTweets from './ListTweets'\nimport Loading from './Loading'\nimport QueryTypeSelector from './QueryTypeSelector'\nimport QueryOrderSelector from './QueryOrderSelector'\nimport PageSelector from './PageSelector'\nimport InfoPanel from './InfoPanel'\nimport axios from 'axios'\n\n\nconst App = () => {\n\n    const [ query, setQuery ] = useState(\"\")\n    const [ user, setUser ] = useState(null)\n    const [ tweets, setTweets ] = useState([])\n    const [ loading, setLoading ] = useState(false)\n    const [ queryType, setQueryType ] = useState(\"favorites\")\n    const [ queryOrder, setQueryOrder ] = useState(\"desc\")\n    const [ page, setPage ] = useState(1)\n\n    const handleQueryChange = (event) =>  {\n        setQuery(event.target.value)\n    }\n\n    const handleQueryTypeChange = (event) => {\n        event.preventDefault()\n        setQueryType(event.target.value)\n    }\n\n    const handleQueryOrderChange = (event) => {\n        event.preventDefault()\n        setQueryOrder(event.target.value)\n    }\n\n    // page cannot go lower than 1 or higher than tweets.length/10 + 1\n    const handlePageUp = (event) => {\n        event.preventDefault()\n        if (tweets.length !== 0) {\n\n            if (page <= (Math.ceil(tweets.length/10))) {\n                setPage(page + 1)\n            }\n            else console.log('Page maximum')\n        }\n    }\n\n    const handlePageDown = (event) => {\n        event.preventDefault()\n        if (tweets.length !== 0) {\n            if (page !== 1) {\n                setPage(page - 1)\n            }\n            else console.log('Page minimum')\n        }\n    }\n\n    const queryTweets = () => {\n        console.log('query', query)\n        if (query.length > 0) {\n            setLoading(true)\n\n            const queryObject = { query, queryType, queryOrder }\n\n            // post request because we need to send some data to form the query params\n            axios.post('/api/query/', queryObject)\n                .then(response => {\n                    console.log(response.data.user)\n                    console.log('tweets returned', response.data.tweets.length)\n                    setUser(response.data.user)\n                    setQuery(user.screen_name)\n                    setTweets(response.data.tweets)\n                    setPage(1)\n                    setLoading(false)\n                })\n                .catch(error => console.log('POST ERROR', error))\n        }\n    }\n\n    return (\n        <div>\n            <h2>tweetsort</h2>\n            <QueryTypeSelector queryType={queryType} handleQueryTypeChange={handleQueryTypeChange}/>\n            <QueryOrderSelector queryOrder={queryOrder} handleQueryOrderChange={handleQueryOrderChange}/>\n            <QueryForm query={query} handleQueryChange={handleQueryChange} queryTweets={queryTweets}/>\n            <Loading loading={loading}/>\n            <InfoPanel tweetsLength={tweets.length} page={page} maxPage={Math.ceil(tweets.length/10)}/>\n            <ListTweets tweets={tweets} page={page}/>\n            <PageSelector page={page} handlePageUp={handlePageUp} handlePageDown={handlePageDown} tweetsLength={tweets.length}/>\n        </div>\n    )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}