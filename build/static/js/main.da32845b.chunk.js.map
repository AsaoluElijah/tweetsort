{"version":3,"sources":["components/QueryForm.js","components/ListTweets.js","components/Loading.js","components/QueryTypeSelector.js","components/QueryOrderSelector.js","components/PageSelector.js","components/InfoPanel.js","components/App.js","index.js"],"names":["QueryForm","props","value","query","onChange","handleQueryChange","onClick","queryTweets","type","ListTweets","tweets","length","maxTweetIndex","page","slice","map","tweet","tweetId","id_str","id","Loading","loading","src","alt","width","height","QueryTypeSelector","QueryType","handleQueryTypeChange","QueryOrderSelector","queryOrder","handleQueryOrderChange","PageSelector","tweetsLength","handlePageDown","handlePageUp","href","target","maxPage","App","useState","setQuery","setUser","setTweets","setLoading","queryType","setQueryType","setQueryOrder","setPage","event","preventDefault","console","log","queryObject","axios","post","then","response","data","user","catch","error","InfoPanel","Math","ceil","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.da32845b.chunk.js","sourcesContent":["import React from 'react'\n\nconst QueryForm = (props) => (\n    <div>\n        @<input value={props.query} onChange={props.handleQueryChange}/>\n        <button onClick={props.queryTweets} type=\"submit\">Get Tweets</button>\n    </div>\n)\n\nexport default QueryForm","import React from 'react'\nimport { Tweet } from 'react-twitter-widgets'\n\nconst ListTweets = (props) => {\n\n    const tweets = props.tweets\n    if(tweets.length === 0) return null\n\n    // If page 1 => tweets 0 to 10\n    // If page 10 => tweets 100 to 110\n\n    const maxTweetIndex = props.page * 10\n\n    const renderedTweets = tweets.slice(maxTweetIndex - 10, maxTweetIndex)\n\n    const content = renderedTweets.map(tweet => \n        <div key={tweet.id}>\n            <Tweet tweetId={tweet.id_str}/>\n            <br></br>\n        </div>\n        )\n    return content\n}\n\nexport default ListTweets","import React from 'react'\n\nconst Loading = (props) => {\n\n    if (props.loading === true) {\n        return (\n            <div id=\"loading\"> \n                <img src=\"loading.gif\" alt=\"loading symbol\" width=\"100\" height=\"25\"/> \n            </div>\n        )\n    } else {\n        return null\n    }\n}\n\nexport default Loading","import React from 'react'\n\nconst QueryTypeSelector = (props) => (\n    <form>\n        <label>\n            Sort by \n            <select value={props.QueryType} onChange={props.handleQueryTypeChange}>\n                <option value=\"favorites\">Likes</option>\n                <option value=\"retweets\">Reach</option>\n                <option value=\"date\">Date</option>\n            </select>\n        </label>\n    </form>\n)\n\nexport default QueryTypeSelector","import React from 'react'\n\nconst QueryOrderSelector = (props) => (\n    <form>\n        <label>\n            In \n            <select value={props.queryOrder} onChange={props.handleQueryOrderChange}>\n                <option value=\"asc\">Ascending</option>\n                <option value=\"desc\">Descending</option>\n            </select>\n             order\n        </label>\n    </form>\n)\n\nexport default QueryOrderSelector","import React from 'react'\n\nconst PageSelector = (props) => {\n    if (props.tweetsLength === 0) {\n        return null\n    }\n\n    return (\n    <div>\n        <button onClick={props.handlePageDown} type=\"submit\">Page Down</button>\n        {props.page}\n        <button onClick={props.handlePageUp} type=\"submit\">Page Up</button>\n    </div>\n    )\n}\n\nexport default PageSelector","import React from 'react'\n\nconst ListTweets = (props) => {\n\n    // Error message can show here\n    if(props.tweetsLength === 0)\n    {\n        return (\n        <div>\n            <h3>Welcome to this sorting tool!</h3>\n            <p>Type in a twitter username (the one with the '@' before it) to get up to 3,200 of an account's most recent tweets. You can sort their tweets by Date, Likes, or Retweets, and choose either ascending or descending order.</p>\n            <p>A loading symbol will show while the tweets are being fetched. If this area is empty (not even this welcome message) it means the tweets are being rendered :)</p>\n            <p>If you enjoy this little tool, follow me <a href=\"https://twitter.com/averywlittle\" target=\"_blank\">@averywlittle</a>.</p>\n            <p>The code is available <a href=\"https://github.com/averywlittle/tweetsort\" target=\"_blank\">here</a>.</p>\n        </div>\n        )\n    } else {\n        return (\n            <div>\n                <p>{props.tweetsLength} tweets loaded! Showing page {props.page} of {props.maxPage}</p>\n                <br></br>\n            </div>\n        )\n    }\n}\n\nexport default ListTweets","import React, { useState } from 'react'\nimport QueryForm from './QueryForm'\nimport ListTweets from './ListTweets'\nimport Loading from './Loading'\nimport QueryTypeSelector from './QueryTypeSelector'\nimport QueryOrderSelector from './QueryOrderSelector'\nimport PageSelector from './PageSelector'\nimport InfoPanel from './InfoPanel'\nimport axios from 'axios'\n\n\nconst App = () => {\n\n    const [ query, setQuery ] = useState(\"\")\n    const [ user, setUser ] = useState(null)\n    const [ tweets, setTweets ] = useState([])\n    const [ loading, setLoading ] = useState(false)\n    const [ queryType, setQueryType ] = useState(\"favorites\")\n    const [ queryOrder, setQueryOrder ] = useState(\"desc\")\n    const [ page, setPage ] = useState(1)\n\n    const handleQueryChange = (event) =>  {\n        setQuery(event.target.value)\n    }\n\n    const handleQueryTypeChange = (event) => {\n        event.preventDefault()\n        setQueryType(event.target.value)\n    }\n\n    const handleQueryOrderChange = (event) => {\n        event.preventDefault()\n        setQueryOrder(event.target.value)\n    }\n\n    // page cannot go lower than 1 or higher than tweets.length/10 + 1\n    const handlePageUp = (event) => {\n        event.preventDefault()\n        if (tweets.length !== 0) {\n\n            if (page <= (Math.ceil(tweets.length/10))) {\n                setPage(page + 1)\n            }\n            else console.log('Page maximum')\n        }\n        console.log('Page', page)\n    }\n\n    const handlePageDown = (event) => {\n        event.preventDefault()\n        if (tweets.length !== 0) {\n            if (page !== 1) {\n                setPage(page - 1)\n            }\n            else console.log('Page minimum')\n        }\n        console.log('Page', page)\n    }\n\n    const queryTweets = () => {\n        console.log('query', query)\n        setLoading(true)\n\n        const queryObject = { query, queryType, queryOrder }\n\n        // post request because we need to send some data to form the query params\n        axios.post('/api/query/', queryObject)\n            .then(response => {\n                console.log(response.data.user)\n                console.log('tweets returned', response.data.tweets.length)\n                setUser(response.data.user)\n                setTweets(response.data.tweets)\n                setLoading(false)\n            })\n            .catch(error => console.log('POST ERROR', error))\n\n    }\n\n    return (\n        <div>\n            <h2>tweetsort</h2>\n            <QueryTypeSelector queryType={queryType} handleQueryTypeChange={handleQueryTypeChange}/>\n            <QueryOrderSelector queryOrder={queryOrder} handleQueryOrderChange={handleQueryOrderChange}/>\n            <QueryForm query={query} handleQueryChange={handleQueryChange} queryTweets={queryTweets}/>\n            <Loading loading={loading}/>\n            <InfoPanel tweetsLength={tweets.length} page={page} maxPage={Math.ceil(tweets.length/10)}/>\n            <ListTweets tweets={tweets} page={page}/>\n            <PageSelector page={page} handlePageUp={handlePageUp} handlePageDown={handlePageDown} tweetsLength={tweets.length}/>\n        </div>\n    )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}