{"version":3,"sources":["components/QueryForm.js","components/ListTweets.js","components/Loading.js","components/QueryTypeSelector.js","components/QueryOrderSelector.js","components/PageSelector.js","components/InfoPanel.js","components/App.js","index.js"],"names":["QueryForm","props","className","value","query","onChange","handleQueryChange","maxlength","size","placeholder","onKeyPress","event","key","console","log","queryTweets","onClick","type","ListTweets","tweets","length","maxTweetIndex","page","slice","map","tweet","tweetId","id_str","id","Loading","loading","src","alt","width","height","QueryTypeSelector","QueryType","handleQueryTypeChange","QueryOrderSelector","queryOrder","handleQueryOrderChange","PageSelector","tweetsLength","handlePageDown","handlePageUp","href","target","rel","maxPage","App","useState","setQuery","setUser","setTweets","setLoading","queryType","setQueryType","setQueryOrder","setPage","preventDefault","queryObject","axios","post","then","response","data","user","screen_name","catch","error","InfoPanel","Math","ceil","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.399387dc.chunk.js","sourcesContent":["import React from 'react'\n\nconst QueryForm = (props) => (\n    <div className=\"interactables\">\n        @<input className=\"queryBar\" value={props.query} onChange={props.handleQueryChange} maxlength=\"15\" size=\"15\" placeholder=\"username\"\n        onKeyPress={event => {\n            if (event.key === 'Enter') {\n                console.log(\"Enter!\")\n                props.queryTweets()\n            }\n        }}/>\n        <div className=\"interactables\"><button className=\"styledButtons\" onClick={props.queryTweets} type=\"submit\">Get Tweets</button></div>\n    </div>\n)\n\nexport default QueryForm","import React from 'react'\nimport { Tweet } from 'react-twitter-widgets'\n\nconst ListTweets = (props) => {\n\n    const tweets = props.tweets\n    if(tweets.length === 0) return null\n\n    // If page 1 => tweets 0 to 10\n    // If page 10 => tweets 100 to 110\n\n    const maxTweetIndex = props.page * 10\n\n    const renderedTweets = tweets.slice(maxTweetIndex - 10, maxTweetIndex)\n\n    const content = renderedTweets.map(tweet => \n        <div key={tweet.id}>\n            <Tweet tweetId={tweet.id_str}/>\n            <br></br>\n        </div>\n        )\n    return content\n}\n\nexport default ListTweets","import React from 'react'\n\nconst Loading = (props) => {\n\n    if (props.loading === true) {\n        return (\n            <div id=\"loading\"> \n                <img src=\"loading.gif\" alt=\"loading symbol\" width=\"100\" height=\"25\"/> \n            </div>\n        )\n    } else {\n        return null\n    }\n}\n\nexport default Loading","import React from 'react'\n\nconst QueryTypeSelector = (props) => (\n    <form className=\"interactables\">\n        <label>\n            Sort by \n            <select className=\"selectButtons\" value={props.QueryType} onChange={props.handleQueryTypeChange}>\n                <option value=\"favorites\">Likes</option>\n                <option value=\"retweets\">Reach</option>\n                <option value=\"date\">Date</option>\n            </select>\n        </label>\n    </form>\n)\n\nexport default QueryTypeSelector","import React from 'react'\n\nconst QueryOrderSelector = (props) => (\n    <form className=\"interactables\">\n        <label>\n            In \n            <select className=\"selectButtons\" value={props.queryOrder} onChange={props.handleQueryOrderChange}>\n                <option value=\"asc\">Ascending</option>\n                <option value=\"desc\">Descending</option>\n            </select>\n        </label>\n        order\n    </form>\n)\n\nexport default QueryOrderSelector","import React from 'react'\n\nconst PageSelector = (props) => {\n    if (props.tweetsLength === 0) {\n        return null\n    }\n\n    return (\n    <div className=\"pagers\">\n        <button className=\"styledButtons\" onClick={props.handlePageDown} type=\"submit\">Previous Page</button>\n        {props.page}\n        <button className=\"styledButtons\" onClick={props.handlePageUp} type=\"submit\">Next Page</button>\n    </div>\n    )\n}\n\nexport default PageSelector","import React from 'react'\n\nconst ListTweets = (props) => {\n\n    // Error message can show here\n    if(props.tweetsLength === 0)\n    {\n        return (\n        <div>\n            <h3>Welcome to this sorting tool!</h3>\n            <p>Type in a twitter username (the one with the '@' before it) to get up to ~3,200 of an account's most recent tweets. You can sort their tweets by Date, Likes, or Retweets, and choose either ascending or descending order.</p>\n            <p>A loading symbol will show while the tweets are being fetched. If this area is empty (not even this welcome message) it means the tweets are being rendered :)</p>\n            <p>If you enjoy this little tool, follow me <a href=\"https://twitter.com/averywlittle\" target=\"_blank\" rel=\"noreferrer\">@averywlittle</a>.</p>\n            <p>The code is available <a href=\"https://github.com/averywlittle/tweetsort\" target=\"_blank\" rel=\"noreferrer\">here</a>.</p>\n        </div>\n        )\n    } else {\n        return (\n            <div>\n                <p>{props.tweetsLength} tweets loaded! Showing page {props.page} of {props.maxPage}.</p>\n            </div>\n        )\n    }\n}\n\nexport default ListTweets","import React, { useState } from 'react'\nimport QueryForm from './QueryForm'\nimport ListTweets from './ListTweets'\nimport Loading from './Loading'\nimport QueryTypeSelector from './QueryTypeSelector'\nimport QueryOrderSelector from './QueryOrderSelector'\nimport PageSelector from './PageSelector'\nimport InfoPanel from './InfoPanel'\nimport axios from 'axios'\n\n\nconst App = () => {\n\n    const [ query, setQuery ] = useState(\"\")\n    const [ user, setUser ] = useState(null)\n    const [ tweets, setTweets ] = useState([])\n    const [ loading, setLoading ] = useState(false)\n    const [ queryType, setQueryType ] = useState(\"favorites\")\n    const [ queryOrder, setQueryOrder ] = useState(\"desc\")\n    const [ page, setPage ] = useState(1)\n\n    const handleQueryChange = (event) =>  {\n        setQuery(event.target.value)\n    }\n\n    const handleQueryTypeChange = (event) => {\n        event.preventDefault()\n        setQueryType(event.target.value)\n    }\n\n    const handleQueryOrderChange = (event) => {\n        event.preventDefault()\n        setQueryOrder(event.target.value)\n    }\n\n    // page cannot go lower than 1 or higher than tweets.length/10 + 1\n    const handlePageUp = (event) => {\n        event.preventDefault()\n        if (tweets.length !== 0) {\n\n            if (page <= (Math.ceil(tweets.length/10))) {\n                setPage(page + 1)\n            }\n            else console.log('Page maximum')\n        }\n    }\n\n    const handlePageDown = (event) => {\n        event.preventDefault()\n        if (tweets.length !== 0) {\n            if (page !== 1) {\n                setPage(page - 1)\n            }\n            else console.log('Page minimum')\n        }\n    }\n\n    const queryTweets = () => {\n        console.log('query', query)\n        if (query.length > 0) {\n            setLoading(true)\n\n            const queryObject = { query, queryType, queryOrder }\n\n            // post request because we need to send some data to form the query params\n            axios.post('/api/query/', queryObject)\n                .then(response => {\n                    console.log(response.data.user)\n                    console.log('tweets returned', response.data.tweets.length)\n                    setUser(response.data.user)\n                    setQuery(response.data.user.screen_name)\n                    setTweets(response.data.tweets)\n                    setPage(1)\n                    setLoading(false)\n                })\n                .catch(error => console.log('POST ERROR', error))\n        }\n    }\n\n    return (\n        <div>\n            <h2>tweetsort</h2>\n            <QueryTypeSelector queryType={queryType} handleQueryTypeChange={handleQueryTypeChange}/>\n            <QueryOrderSelector queryOrder={queryOrder} handleQueryOrderChange={handleQueryOrderChange}/>\n            <QueryForm query={query} handleQueryChange={handleQueryChange} queryTweets={queryTweets}/>\n            <Loading loading={loading}/>\n            <InfoPanel tweetsLength={tweets.length} page={page} maxPage={Math.ceil(tweets.length/10)}/>\n            <ListTweets tweets={tweets} page={page}/>\n            <PageSelector page={page} handlePageUp={handlePageUp} handlePageDown={handlePageDown} tweetsLength={tweets.length}/>\n        </div>\n    )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}