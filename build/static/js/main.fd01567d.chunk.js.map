{"version":3,"sources":["components/QueryForm.js","components/ListTweets.js","components/Loading.js","components/QueryTypeSelector.js","components/QueryOrderSelector.js","components/PageSelector.js","components/App.js","index.js"],"names":["QueryForm","props","value","query","onChange","handleQueryChange","onClick","queryTweets","type","ListTweets","tweets","length","console","log","maxTweetIndex","page","slice","map","tweet","tweetId","id_str","id","Loading","loading","src","alt","width","height","QueryTypeSelector","QueryType","handleQueryTypeChange","QueryOrderSelector","queryOrder","handleQueryOrderChange","PageSelector","handlePageDown","handlePageUp","App","useState","setQuery","setUser","setTweets","setLoading","queryType","setQueryType","setQueryOrder","setPage","event","preventDefault","target","queryObject","axios","post","then","response","data","user","catch","error","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fd01567d.chunk.js","sourcesContent":["import React from 'react'\n\nconst QueryForm = (props) => (\n    <div>\n        @<input value={props.query} onChange={props.handleQueryChange}/>\n        <button onClick={props.queryTweets} type=\"submit\">Get Tweets</button>\n    </div>\n)\n\nexport default QueryForm","import React from 'react'\nimport { Tweet } from 'react-twitter-widgets'\n\nconst ListTweets = (props) => {\n\n    const tweets = props.tweets\n    if(tweets.length === 0) console.log('empty tweets')\n    if(tweets.length === 0) return null\n\n    // If page 1 => tweets 0 to 10\n    // If page 10 => tweets 100 to 110\n\n    const maxTweetIndex = props.page * 10\n\n    const renderedTweets = tweets.slice(maxTweetIndex - 10, maxTweetIndex)\n\n    const content = renderedTweets.map(tweet => \n        <div key={tweet.id}>\n            <Tweet tweetId={tweet.id_str}/>\n            <br></br>\n        </div>\n        )\n    return content\n}\n\nexport default ListTweets","import React from 'react'\n\nconst Loading = (props) => {\n\n    if (props.loading === true) {\n        return (\n            <div id=\"loading\"> \n                <img src=\"loading.gif\" alt=\"loading symbol\" width=\"100\" height=\"25\"/> \n            </div>\n        )\n    } else {\n        return null\n    }\n}\n\nexport default Loading","import React from 'react'\n\nconst QueryTypeSelector = (props) => (\n    <form>\n        <label>\n            Sort by:\n            <select value={props.QueryType} onChange={props.handleQueryTypeChange}>\n                <option value=\"favorites\">Likes</option>\n                <option value=\"retweets\">Reach</option>\n                <option value=\"date\">Date</option>\n            </select>\n        </label>\n    </form>\n)\n\nexport default QueryTypeSelector","import React from 'react'\n\nconst QueryOrderSelector = (props) => (\n    <form>\n        <label>\n            In order:\n            <select value={props.queryOrder} onChange={props.handleQueryOrderChange}>\n                <option value=\"asc\">Ascending</option>\n                <option value=\"desc\">Descending</option>\n            </select>\n        </label>\n    </form>\n)\n\nexport default QueryOrderSelector","import React from 'react'\n\nconst PageSelector = (props) => (\n    <div>\n        <button onClick={props.handlePageDown} type=\"submit\">Page Down</button>\n        {props.page}\n        <button onClick={props.handlePageUp} type=\"submit\">Page Up</button>\n    </div>\n)\n\nexport default PageSelector","import React, { useState } from 'react'\nimport QueryForm from './QueryForm'\nimport ListTweets from './ListTweets'\nimport Loading from './Loading'\nimport QueryTypeSelector from './QueryTypeSelector'\nimport QueryOrderSelector from './QueryOrderSelector'\nimport PageSelector from './PageSelector'\nimport axios from 'axios'\n\n\nconst App = () => {\n\n    const [ query, setQuery ] = useState(\"\")\n    const [ user, setUser ] = useState(null)\n    const [ tweets, setTweets ] = useState([])\n    const [ loading, setLoading ] = useState(false)\n    const [ queryType, setQueryType ] = useState(\"favorites\")\n    const [ queryOrder, setQueryOrder ] = useState(\"desc\")\n    const [ page, setPage ] = useState(1)\n\n    const handleQueryChange = (event) =>  {\n        setQuery(event.target.value)\n    }\n\n    const handleQueryTypeChange = (event) => {\n        event.preventDefault()\n        setQueryType(event.target.value)\n    }\n\n    const handleQueryOrderChange = (event) => {\n        event.preventDefault()\n        setQueryOrder(event.target.value)\n    }\n\n    // page cannot go lower than 1 or higher than tweets.length/10 + 1\n    const handlePageUp = (event) => {\n        event.preventDefault()\n        if ((page * 10) < (tweets.length/10 + 1)) {\n            setPage(page + 1)\n        }\n    }\n    const handlePageDown = (event) => {\n        event.preventDefault()\n        if (page !== 1) {\n            setPage(page - 1)\n        }\n    }\n\n    const queryTweets = () => {\n        console.log('query', query)\n        setLoading(true)\n\n        const queryObject = { query, queryType, queryOrder }\n\n        // post request because we need to send some data to form the query params\n        axios.post('/api/query/', queryObject)\n            .then(response => {\n                console.log(response.data.user)\n                console.log('tweets returned', response.data.tweets.length)\n                setUser(response.data.user)\n                setTweets(response.data.tweets)\n                setLoading(false)\n            })\n            .catch(error => console.log('POST ERROR', error))\n\n    }\n\n    return (\n        <div>\n            <h2>tweetsort</h2>\n            <QueryTypeSelector queryType={queryType} handleQueryTypeChange={handleQueryTypeChange}/>\n            <QueryOrderSelector queryOrder={queryOrder} handleQueryOrderChange={handleQueryOrderChange}/>\n            <QueryForm query={query} handleQueryChange={handleQueryChange} queryTweets={queryTweets}/>\n            <Loading loading={loading}/>\n            <ListTweets tweets={tweets} page={page}/>\n            <PageSelector page={page} handlePageUp={handlePageUp} handlePageDown={handlePageDown}/>\n        </div>\n    )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}